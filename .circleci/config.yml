version: 2.1

# commands:
  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   parameters:
  #     workflow_id:
  #       type: string
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #           aws s3 rm s3://udacity-<< parameters.workflow_id >> --recursive
  #           aws cloudformation delete-stack --stack-name udacity-frontend-<< parameters.workflow_id >>
  #           aws cloudformation delete-stack --stack-name udacity-backend-<< parameters.workflow_id >>

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     workflow_id:
  #       type: string
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         when: on_fail
  #         command: |
  #           SUCCESS=$(curl --insecure  https://kvdb.io/Mm8TwjSja4eccfm28mnTsM/migration_<< parameters.workflow_id >>)
  #           echo ${SUCCESS}
  #           if [[ ${SUCCESS} == 1 ]] 
  #           then
  #             cd ~/project/backend
  #             npm install
  #             npm run migrations:revert
  #           fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=be-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udacity-be-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udacity-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend IP to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires: 
          - test-frontend
          - test-backend
          - scan-frontend
          - scan-backend
          filters:
            branches:
              only: [main]
